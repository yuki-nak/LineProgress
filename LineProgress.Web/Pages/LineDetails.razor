@page "/LineDetails/{lineName}"
@using LineProgress.Entities
@using LineProgress.Services
@using System.Timers
@implements IDisposable
@inject LineService lineService
<h1 id="lineName">@LineName</h1>

@if (selectedLine != null)
{
    <table class="progress-table">
        <colgroup>
            <col style="width: 50%;" />
            <col style="width: 50%;" />
        </colgroup>
        <tbody>
            <tr>
                <th>Daily Progress</th>
                <th>Monthly Progress</th>
            </tr>
            <tr>
                <td>
                    <p><span class="label">Plan:</span> <span class="number">@selectedLine.DailyPlan.ToString("N0")</span></p>
                    <p><span class="label">Actual:</span> <span class="number">@selectedLine.DailyActual.ToString("N0")</span></p>
                </td>
                <td>
                    <p><span class="label">Plan:</span> <span class="number">@selectedLine.MonthlyPlan.ToString("N0")</span></p>
                    <p><span class="label">Actual:</span> <span class="number">@selectedLine.MonthlyActual.ToString("N0")</span></p>
                </td>
            </tr>
            <tr>
                <td>
                    <p>Difference: <span class="number">@selectedLine.DailyDifference.ToString("N0")</span></p>
                </td>
                <td>
                    <p>Difference: <span class="number">@selectedLine.MonthlyDifference.ToString("N0")</span></p>
                </td>
            </tr>
        </tbody>
    </table>
}
else
{
    <p>Line Not found</p>
}
@code {
    Line selectedLine;
    Timer timer;
    [Parameter]
    public string LineName { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
        //selectedLine = await lineService.GetLineByName(LineName);
        // タイマーを初期化して1分ごとにデータを更新
        timer = new Timer(10000);
        timer.Elapsed += async (sender, e) => await UpdateData();
        timer.AutoReset = true;
        timer.Enabled = true;
    }
    private async Task UpdateData()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                selectedLine = await lineService.GetLineByNameAsync(LineName);
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while updating data: {ex.Message}");
        }
    }
    public void Dispose()
    {
        timer.Dispose();
    }
}
<style>
    body {
        margin: 0;
        padding: 0;
        background-color: black;
        color: white;
        font-size: 86px;
    }
    #lineName {
        text-align: center;
        font-size: 92px;
    }
    .progress-table {
        width: 100%;
        border-collapse: collapse;
        border-spacing: 0;
    }
        .progress-table th,
        .progress-table td {
            border: 1px solid white; /* 枠線を白に設定 */
            text-align: center;
            padding: 8px;
        }
        .progress-table th {
            background-color: #000; /* ヘッダーの背景色を変更 */
            font-size: 92px;
        }
        .progress-table tbody tr:nth-child(even) td {
            background-color: #000; /* 偶数行の背景色を変更 */
        }
        .progress-table tbody tr:nth-child(odd) td {
            background-color: #000; /* 奇数行の背景色を変更 */
        }

        .number {
            text-align: right; /* 数字を右寄せにする */
        }

        .label {
            text-align: left; /* ラベルのテキストを左寄せにする */
            margin-right: 10px; /* ラベルと数字の間に余白を設定する */
        }
</style>
